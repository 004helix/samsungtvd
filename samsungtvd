#!/usr/bin/python3

import paho.mqtt.client
import subprocess
import threading
import traceback
import websocket
import logging
import base64
import socket
import ctypes
import struct
import signal
import time
import json
import ssl
import sys
import os


MQTT_HOST = 'mosquitto'
MQTT_PORT = 1883
SSDP_ADDR = '239.255.255.250'
SSDP_PORT = 1900
PING_INTERVAL = 15

libc = ctypes.CDLL('libc.so.6')


def uptime():
    if hasattr(time, 'monotonic'):
        return time.monotonic()
    else:
        buf = ctypes.create_string_buffer(4096)

        if libc.sysinfo(buf) != 0:
            return -1

        return struct.unpack_from('@l', buf.raw)[0]


def terminate(signum, frame):
    sys.exit(0)


def getaddrbymac(mac):
    mac = mac.lower()

    with open('/proc/net/arp') as f:
        f.readline()
        for line in f:
            rec = line.split()
            if len(rec) < 3:
                continue
            if rec[3].replace(':', '').lower() == mac:
                return rec[0]

    return None


def getmacbyaddr(addr):
    with open('/proc/net/arp') as f:
        f.readline()
        for line in f:
            rec = line.split()
            if len(rec) < 3:
                continue
            if rec[0] == addr:
                return rec[3].replace(':', '').lower()

    return None


class MqttClient(paho.mqtt.client.Client):
    def setlogger(self, logger):
        self.enable_logger(logger)
        self.l = logger

    def publish(self, topic, payload=None, qos=0, retain=True, quiet=False):
        super(MqttClient, self).publish(topic, payload, qos=qos, retain=retain)
        if not quiet:
            self.l.info('> %s = %s', topic, payload)


def publish_status(mqtt, hosts, mac):
    if mac not in hosts:
        return

    if hosts[mac]['status']:
        status = 'ON'
    else:
        status = 'OFF'

    hosts[mac]['timer'] = None

    mqtt.publish('samsungtv/{}/power'.format(mac), status)


def check_hosts(mqtt, hosts):
    u = uptime()

    for mac, state in hosts.items():
        if 'status' not in state:
            continue

        if not state['status'] and \
           state['lastseen'] > 0 and \
           state['lastseen'] + PING_INTERVAL * 3 >= u:
            state['status'] = True
            if state['timer'] is not None:
                state['timer'].cancel()
            state['timer'] = threading.Timer(1, publish_status,
                                             [mqtt, hosts, mac])
            state['timer'].start()

        elif state['status'] and \
            (state['lastseen'] == -1 or
             state['lastseen'] + PING_INTERVAL * 3 < u):
            state['status'] = False
            if state['timer'] is not None:
                state['timer'].cancel()
            state['timer'] = threading.Timer(1, publish_status,
                                             [mqtt, hosts, mac])
            state['timer'].start()


def mqtt_connected(mqtt, userdata, flags, rc):
    if rc == 0:
        mqtt.subscribe('samsungtv/+/power/set')


def mqtt_received(mqtt, userdata, message):
    payload = message.payload
    topic = message.topic
    hosts = userdata

    mqtt.l.info('< %s = %s', topic, payload.decode('utf-8'))

    try:
        t = topic.split('/')
        assert t[-1] == 'set', 'unsubscribed topic'
        assert t[-2] == 'power', 'unsubscribed topic'
        mac = t[-3].lower()
    except Exception:
        return

    if len(mac) != 12:
        return

    if mac in hosts:
        addr = hosts[mac]['addr']
    else:
        addr = getaddrbymac(mac)

    if payload not in (b'ON', b'OFF'):
        return

    if payload == b'ON' and addr is None:
        arg = ':'.join([mac[i:i+2] for i in range(0, len(mac), 2)])
        subprocess.call(['ether-wake', arg])
        return

    try:
        with open('tokens.json') as f:
            tokens = json.load(f)
    except Exception:
        tokens = dict()

    try:
        name = base64.b64encode(b'samsungctl').decode('utf-8')
        url = 'wss://{}:{}/api/v2/channels/samsung.remote.control?name={}'
        url = url.format(addr, 8002, name)
        if mac in tokens:
            url += '&token=' + tokens[mac]

        conn = websocket.create_connection(url, 3,
                                           sslopt={"cert_reqs": ssl.CERT_NONE})
        resp = json.loads(conn.recv())

        if resp['event'] != 'ms.channel.connect':
            conn.close()
            logging.error('failed to send KEY_POWER: %s', resp['event'])
            raise Exception

        if 'token' in resp['data']:
            if mac not in tokens or resp['data']['token'] != tokens[mac]:
                tokens[mac] = resp['data']['token']
                with open('tokens.json', 'w') as f:
                    json.dump(tokens, f)

        payload = json.dumps({
            'method': 'ms.remote.control',
            'params': {
                'Cmd': 'Click',
                'DataOfCmd': 'KEY_POWER',
                'Option': 'false',
                'TypeOfRemote': 'SendRemoteKey'
            }
        })

        conn.send(payload)
        conn.close()

    except Exception:
        traceback.print_exc(file=sys.stdout)

        if payload == b'ON':
            arg = ':'.join([mac[i:i+2] for i in range(0, len(mac), 2)])
            subprocess.call(['ether-wake', arg])


def datagram_received(data, addr, hosts):
    addr, port = addr

    try:
        header, payload = data.split(b'\r\n\r\n')[:2]
        lines = header.split(b'\r\n')
        cmd = lines[0].split()

        lines = map(lambda x: x.replace(b': ', b':', 1), lines[1:])
        lines = filter(lambda x: len(x) > 0, lines)

        headers = [x.split(b':', 1) for x in lines]
        headers = dict(map(lambda x: (x[0].lower(), x[1]), headers))

    except Exception:
        return

    if cmd[0] not in (b'NOTIFY', b'HTTP/1.1', b'HTTP/1.0'):
        return

    mac = None
    for key, state in hosts.items():
        if 'addr' in state and state['addr'] == addr:
            mac = key
            break

    if mac is None:
        mac = getmacbyaddr(addr)

    if mac is None:
        # datagram received in p2p tunnel without hardware address ?
        return

    if mac not in hosts:
        hosts[mac] = {
            'addr': addr,
            'lastseen': -1,
            'ignore_discover': 0,
            'status': False,
            'timer': None
        }

    if cmd[0] == b'NOTIFY':
        if b'nt' not in headers or \
           headers[b'nt'] != b'upnp:rootdevice':
            return
        if b'nts' not in headers or \
           headers[b'nts'] not in (b'ssdp:alive', b'ssdp:byebye'):
            return

        if headers[b'nts'] == b'ssdp:alive':
            hosts[mac]['lastseen'] = uptime()
        else:
            hosts[mac]['lastseen'] = -1
            hosts[mac]['ignore_discover'] = uptime() + 30

    elif cmd[0] in (b'HTTP/1.1', b'HTTP/1.0'):
        if len(cmd) < 2 or cmd[1] != b'200':
            return
        if b'st' not in headers:
            return

        u = uptime()

        if u >= hosts[mac]['ignore_discover']:
            hosts[mac]['lastseen'] = u


def main():
    # dicovered hosts
    hosts = dict()

    # setup ssdp socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    addr = socket.inet_aton(SSDP_ADDR)
    iface = socket.inet_aton('0.0.0.0')
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, addr + iface)
    sock.bind(('0.0.0.0', SSDP_PORT))
    sock.settimeout(PING_INTERVAL / 3.0)

    msearch = b'M-SEARCH * HTTP/1.1\r\n' \
              b'HOST: %s:%d\r\n' \
              b'ST: upnp:rootdevice\r\n' \
              b'MX: 2\r\n' \
              b'MAN: ssdp:discover\r\n' \
              b'\r\n' % (SSDP_ADDR.encode('utf-8'), SSDP_PORT)

    # setup mqtt client
    mqtt = MqttClient('samsungctl')
    mqtt.setlogger(logging.getLogger('mqtt'))
    mqtt.on_message = mqtt_received
    mqtt.on_connect = mqtt_connected
    mqtt.user_data_set(hosts)
    mqtt.connect_async(MQTT_HOST, port=MQTT_PORT)
    mqtt.loop_start()

    sent = uptime()
    sock.sendto(msearch, (SSDP_ADDR, SSDP_PORT))
    while True:
        try:
            data, addr = sock.recvfrom(1024)
            datagram_received(data, addr, hosts)
            check_hosts(mqtt, hosts)
        except socket.timeout:
            pass

        if uptime() >= sent + PING_INTERVAL:
            sent = uptime()
            sock.sendto(msearch, (SSDP_ADDR, SSDP_PORT))

    mqtt.loop_stop()


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s')

    if os.getenv('MQTT_HOST') is not None:
        MQTT_HOST = os.getenv('MQTT_HOST')

    if os.getenv('MQTT_PORT') is not None:
        MQTT_PORT = int(os.getenv('MQTT_PORT'))

    if os.getenv('PING_INTERVAL') is not None:
        PING_INTERVAL = int(os.getenv('PING_INTERVAL'))

    if os.getpid() == 1:
        signal.signal(signal.SIGINT, terminate)
        signal.signal(signal.SIGTERM, terminate)
        signal.signal(signal.SIGQUIT, terminate)

    main()
